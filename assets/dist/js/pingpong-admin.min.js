var PingPong_Admin_MatchCPTs;!function(e){"use strict";var a={},t={};"undefined"!=typeof PingPong_Admin&&(a=PingPong_Admin,t="undefined"!=typeof PingPong_Admin.l10n?PingPong_Admin.l10n:{});var s=PingPong_Admin_MatchCPTs={$scores_modal:null,$games_input:null,scores:{players:{},teams:{},matches:[]},init:function(){s.get_elements(),s.setup_handlers(),s.initialize_match_type(),a.scores&&(s.scores=a.scores)},get_elements:function(){s.$scores_modal=e("#pingpong-scores-modal"),s.$games_input=e('select[name="_rbm_games"]'),s.$game_type_input=e('input[name="_rbm_type"]')},setup_handlers:function(){e(document).on("click",'#match-type .rbm-field-radio input[type="radio"]',s.match_type_select),e(document).on("click","[data-scores-close]",s.scores_modal_close),e(document).on("click","[data-scores-open]",s.scores_modal_add_scores),e(document).on("click","[data-scores-submit]",s.scores_modal_submit),e(document).on("change",'.pingpong-scores-table input[type="number"]',s.scores_update),e(document).on("click","body.post-type-match.pingpong-matches-complete .wp-list-table a.row-title,body.post-type-match.pingpong-matches-complete .wp-list-table .row-actions .edit a",s.scores_modal_preview)},initialize_match_type:function(){e('#match-type .rbm-field-radio input[type="radio"]:checked').click()},match_type_select:function(){var a=e(this).val(),t=e("#match-settings-"+a),s=e('[id^="match-settings-"]:not(#match-settings-'+a+")");t.length&&(t.show(),s.hide())},scores_modal_add_scores:function(){var a,t,o,n,r,l,d,i=s.$games_input.val(),p=s.$game_type_input.filter(":checked").val(),_=s.$scores_modal.find(".pingpong-scores-table"),c=(_.find("thead tr"),_.find("tbody"),0);switch(e("body").addClass("pingpong-modal-open"),c=parseInt(i),s.scores_modal_open(),p){case"singles":var m=[];if(a=e('select[name="_rbm_singles_players[]"]'),o=a.val()){for(d=0;d<o.length;d++)m.push({name:a.find('option[value="'+o[d]+'"]').html().trim(),id:o[d]});l=s.scores_modal_get_table_data("singles",m)}s.scores_modal_populate_table(c,l.rows,l.footer);break;case"doubles":var u=[];if(t=e('select[name="_rbm_doubles_teams[]"]'),n=t.val())for(d=0;d<n.length;d++)u.push({name:t.find('option[value="'+n[d]+'"]').html().trim(),id:n[d]});s.scores_modal_get_table_data("doubles",!1,u),s.scores_modal_populate_table(c,l.rows);break;case"team":if(t=e('select[name="_rbm_teams[]"]'),n=t.val()){for(s.$scores_modal.find(".pingpong-scores-container").addClass("loading"),r={},d=0;d<n.length;d++)r[n[d]]=t.find('option[value="'+n[d]+'"]').html().trim();e.post(ajaxurl,{action:"pingpong_get_team_players",team_IDs:n},function(e){var a=e.data;s.$scores_modal.find(".pingpong-scores-container").removeClass("loading"),"undefined"!=typeof e.success&&e.success&&(l=s.scores_modal_get_table_data("team",!1,a),s.scores_modal_populate_table(c,l.rows,l.footer))})}}},scores_modal_preview:function(a){var t=e(this).closest("tr").attr("id").match(/post-(\d+)/)[1];a.preventDefault(),e.post(ajaxurl,{action:"pingpong_get_match_scores",match_id:t},function(e){var a;if("undefined"!=typeof e.success&&e.success){switch(e.data.type){case"singles":a=s.scores_modal_get_table_data("singles",e.data.scores.players);break;case"doubles":break;case"team":a=s.scores_modal_get_table_data("team",!1,e.data.scores.teams)}s.scores_modal_populate_table(e.data.scores.matches[0].length,a.rows,a.footer),s.scores_modal_populate_scores(e.data.scores.matches),s.$scores_modal.find('input[type="number"]').prop("disabled",!0),s.scores_modal_open()}})},scores_modal_open:function(){s.$scores_modal.show()},scores_modal_get_table_data:function(e,a,t){var s,o=[],n=[];switch(e){case"singles":for(s=0;s<a.length;s++)o.push({label:a[s].name,player_id:a[s].id}),n.push({label:a[s].name,player_id:a[s].id});break;case"doubles":for(s=0;s<t.length;s++)o.push({label:t[s].name,team_id:t[s].id});break;case"team":o.push({label:"<strong>"+t[0].name+":</strong> "+t[0].players[0].name,team_id:t[0].id,player_id:t[0].players[0].id}),o.push({label:"<strong>"+t[1].name+":</strong> "+t[1].players[0].name,team_id:t[1].id,player_id:t[1].players[0].id}),o.push({label:"<strong>"+t[0].name+":</strong> "+t[0].players[1].name,team_id:t[0].id,player_id:t[0].players[1].id}),o.push({label:"<strong>"+t[1].name+":</strong> "+t[1].players[1].name,team_id:t[1].id,player_id:t[1].players[1].id}),o.push({label:"<strong>"+t[0].name+":</strong> "+t[0].players[0].name,team_id:t[0].id,player_id:t[0].players[0].id}),o.push({label:"<strong>"+t[1].name+":</strong> "+t[1].players[1].name,team_id:t[1].id,player_id:t[1].players[1].id}),o.push({label:"<strong>"+t[0].name+":</strong> "+t[0].players[1].name,team_id:t[0].id,player_id:t[0].players[1].id}),o.push({label:"<strong>"+t[1].name+":</strong> "+t[1].players[0].name,team_id:t[1].id,player_id:t[1].players[0].id}),n.push({label:t[0].name,team_id:t[0].id}),n.push({label:t[1].name,team_id:t[1].id}),n.push({label:t[0].players[0].name,player_id:t[0].players[0].id}),n.push({label:t[0].players[1].name,player_id:t[0].players[1].id}),n.push({label:t[1].players[0].name,player_id:t[1].players[0].id}),n.push({label:t[1].players[1].name,player_id:t[1].players[1].id})}return{rows:o,footer:n}},scores_modal_populate_table:function(o,n,r){var l,d,i,p,_,c,m,u=s.$scores_modal.find(".pingpong-scores-table"),y=u.find("tbody"),g=u.find("tfoot");for(u.find("thead").append("<tr />"),l=u.find("thead tr"),l.append("<th />"),c=0;c<o;c++)l.append(e("<th>"+t.game+" "+(c+1)+"</th>"));for(_=0;_<n.length;_++){for(i="undefined"!=typeof n[_].player_id?n[_].player_id:"",p="undefined"!=typeof n[_].team_id?n[_].team_id:"",d='<tr data-player-id="'+i+'" data-team-id="'+p+'"><td>'+n[_].label+"</td>",c=0;c<o;c++)d+='<td><input type="number" value="0" /></td>';d+="</tr>",y.append(e(d))}if(r)for(g.append(e('<tr class="pingpong-tfoot-title"><td colspan="'+(o+1)+'">'+t.totals+":</td></tr>")),m=0;m<r.length;m++)i="undefined"!=typeof r[m].player_id?r[m].player_id:"",p="undefined"!=typeof r[m].team_id?r[m].team_id:"",g.append(e("<tr><td>"+r[m].label+'</td><td data-player-id="'+i+'" data-team-id="'+p+'">0</td><td colspan="'+(o-1)+'"></td></tr>'));a.scores&&s.scores_modal_populate_scores(a.scores.matches)},scores_modal_populate_scores:function(a){return a.length!==s.$scores_modal.find("tbody tr").length/2?void s.scores_modal_error(t.cant_load_scores):(s.$scores_modal.find('tbody td:not(:first-of-type) input[type="number"]').each(function(){var t=e(this).closest("tr"),s=Math.floor(t.index()/2),o=e(this).closest("td").index()-1,n=t.index()%2===1?1:0;e(this).val(a[s][o][n])}),void s.scores_update())},scores_modal_error:function(e){s.$scores_modal.find(".pingpong-scores-error").slideDown().find("p").html(e)},scores_modal_close:function(){e("body").removeClass("pingpong-modal-open"),s.$scores_modal.find(".pingpong-scores-error").hide(),s.$scores_modal.find("thead, tbody, tfoot").html(""),s.$scores_modal.hide()},scores_update:function(){var a,t,o=s.$scores_modal.find("tbody tr").length/2,n=s.$scores_modal.find("thead th").length-1,r={},l={},d={win:null,scores:[],player_1:{id:0,team_id:0,games:0,$row:null},player_2:{id:0,team_id:0,games:0,$row:null}},i={player_1:{score:0,$input:null},player_2:{score:0,$input:null}},p=[];for(a=0;a<o;a++){for(d.player_1.$row=s.$scores_modal.find("tbody tr:eq("+2*a+")"),d.player_2.$row=s.$scores_modal.find("tbody tr:eq("+(2*a+1)+")"),d.player_1.id=d.player_1.$row.attr("data-player-id"),d.player_2.id=d.player_2.$row.attr("data-player-id"),d.player_1.team_id=d.player_1.$row.attr("data-team-id"),d.player_2.team_id=d.player_2.$row.attr("data-team-id"),"undefined"==typeof r[d.player_1.id]&&(r.length++,r[d.player_1.id]=0),"undefined"==typeof r[d.player_2.id]&&(r.length++,r[d.player_2.id]=0),"undefined"==typeof l[d.player_1.team_id]&&(l.length++,l[d.player_1.team_id]=0),"undefined"==typeof l[d.player_2.team_id]&&(l.length++,l[d.player_2.team_id]=0),d.player_1.games=0,d.player_2.games=0,d.win=null,d.scores=[],t=0;t<n;t++)i.player_1.$input=d.player_1.$row.find("td:eq("+(t+1)+') input[type="number"]'),i.player_2.$input=d.player_2.$row.find("td:eq("+(t+1)+') input[type="number"]'),d.player_1.games>=Math.floor(n/2)+1?(d.win=1,i.player_1.$input.prop("disabled",!0),i.player_2.$input.prop("disabled",!0)):d.player_2.games>=Math.floor(n/2)+1?(d.win=2,i.player_1.$input.prop("disabled",!0),i.player_2.$input.prop("disabled",!0)):(i.player_1.$input.prop("disabled",!1),i.player_2.$input.prop("disabled",!1)),i.player_1.score=parseInt(i.player_1.$input.val()),i.player_2.score=parseInt(i.player_2.$input.val()),i.player_1.score>=11&&i.player_1.score-i.player_2.score>=2?d.player_1.games++:i.player_2.score>=11&&i.player_2.score-i.player_1.score>=2&&d.player_2.games++,d.scores.push([i.player_1.score,i.player_2.score]);r[d.player_1.id]=r[d.player_1.id]+d.player_1.games,r[d.player_2.id]=r[d.player_2.id]+d.player_2.games,d.win&&(l[d["player_"+d.win].team_id]=l[d["player_"+d.win].team_id]+1),p.push(d.scores)}s.scores.players=r,s.scores.teams=l,s.scores.matches=p,e.each(r,function(e,a){return"length"==e||!e||void s.$scores_modal.find('tfoot [data-player-id="'+e+'"]').html(a)}),e.each(l,function(e,a){return"length"==e||!e||void s.$scores_modal.find('tfoot [data-team-id="'+e+'"]').html(a)})},scores_modal_submit:function(){confirm(t.confirm_submit_match)&&e.post(ajaxurl,{action:"pingpong_submit_scores",match_ID:a.match_ID,scores:s.scores},function(e){return"undefined"!=typeof e.success&&e.success?void(window.location=e.data.redirect):void alert(t.could_not_save_match)})}};e(s.init)}(jQuery);var PingPong_Admin_MatchCPTs;!function(e){"use strict";var a={},t={};"undefined"!=typeof PingPong_Admin&&(a=PingPong_Admin,t="undefined"!=typeof PingPong_Admin.l10n?PingPong_Admin.l10n:{});var s=PingPong_Admin_MatchCPTs={$games:null,init:function(){s.get_elements(),s.setup_handlers()},get_elements:function(){s.$games=e("#pingpong-won-games")},setup_handlers:function(){e(document).on("click","[data-expand-games]",s.toggle_games)},toggle_games:function(a){var o=s.$games.is(":visible");a.preventDefault(),o?(e(this).html(t.view_matches),s.hide_games()):(e(this).html(t.hide_matches),s.expand_games())},expand_games:function(e){s.$games.show()},hide_games:function(e){s.$games.hide()}};e(s.init)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
