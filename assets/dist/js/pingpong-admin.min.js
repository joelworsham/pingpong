var PingPong_Admin_MatchCPTs;!function(e){"use strict";var a={},s={};"undefined"!=typeof PingPong_Admin&&(a=PingPong_Admin,s="undefined"!=typeof PingPong_Admin.l10n?PingPong_Admin.l10n:{});var t=PingPong_Admin_MatchCPTs={$scores_modal:null,$games_input:null,scores:{players:{},teams:{},matches:[]},init:function(){t.get_elements(),t.setup_handlers(),t.initialize_match_type(),a.scores&&(t.scores=a.scores)},get_elements:function(){t.$scores_modal=e("#pingpong-scores-modal"),t.$games_input=e('select[name="_rbm_games"]'),t.$game_type_input=e('input[name="_rbm_type"]')},setup_handlers:function(){e(document).on("click",'#match-type .rbm-field-radio input[type="radio"]',t.match_type_select),e(document).on("click","[data-scores-close]",t.scores_modal_close),e(document).on("click","[data-scores-open]",t.scores_modal_add_scores),e(document).on("click","[data-scores-submit]",t.scores_modal_submit),e(document).on("change",'.pingpong-scores-table input[type="number"]',t.scores_update),e(document).on("click","body.post-type-match.pingpong-matches-complete .wp-list-table a.row-title,body.post-type-match.pingpong-matches-complete .wp-list-table .row-actions .edit a",t.scores_modal_preview)},initialize_match_type:function(){e('#match-type .rbm-field-radio input[type="radio"]:checked').click()},match_type_select:function(){var a=e(this).val(),s=e("#match-settings-"+a),t=e('[id^="match-settings-"]:not(#match-settings-'+a+")");s.length&&(s.show(),t.hide())},scores_modal_add_scores:function(){var a,s,o,n,r,l,i,d=t.$games_input.val(),p=t.$game_type_input.filter(":checked").val(),_=t.$scores_modal.find(".pingpong-scores-table"),m=(_.find("thead tr"),_.find("tbody"),0);switch(e("body").addClass("pingpong-modal-open"),m=parseInt(d),t.scores_modal_open(),p){case"singles":var c=[];if(a=e('select[name="_rbm_singles_players[]"]'),o=a.val()){for(i=0;i<o.length;i++)c.push({name:a.find('option[value="'+o[i]+'"]').html().trim(),id:o[i]});l=t.scores_modal_get_table_data("singles",c)}t.scores_modal_populate_table(m,l.rows,l.footer);break;case"doubles":var u=[];if(s=e('select[name="_rbm_doubles_teams[]"]'),n=s.val())for(i=0;i<n.length;i++)u.push({name:s.find('option[value="'+n[i]+'"]').html().trim(),id:n[i]});t.scores_modal_get_table_data("doubles",!1,u),t.scores_modal_populate_table(m,l.rows);break;case"team":if(s=e('select[name="_rbm_teams[]"]'),n=s.val()){for(t.$scores_modal.find(".pingpong-scores-container").addClass("loading"),r={},i=0;i<n.length;i++)r[n[i]]=s.find('option[value="'+n[i]+'"]').html().trim();e.post(ajaxurl,{action:"pingpong_get_team_players",team_IDs:n},function(e){var a=e.data;t.$scores_modal.find(".pingpong-scores-container").removeClass("loading"),"undefined"!=typeof e.success&&e.success&&(l=t.scores_modal_get_table_data("team",!1,a),t.scores_modal_populate_table(m,l.rows,l.footer))})}}},scores_modal_preview:function(a){var s=e(this).closest("tr").attr("id").match(/post-(\d+)/)[1];a.preventDefault(),e.post(ajaxurl,{action:"pingpong_get_match_scores",match_id:s},function(e){var a;if("undefined"!=typeof e.success&&e.success){switch(e.data.type){case"singles":a=t.scores_modal_get_table_data("singles",e.data.scores.players);break;case"doubles":break;case"team":a=t.scores_modal_get_table_data("team",!1,e.data.scores.teams)}t.scores_modal_populate_table(e.data.scores.matches[0].length,a.rows,a.footer),t.scores_modal_populate_scores(e.data.scores.matches),t.$scores_modal.find('input[type="number"]').prop("disabled",!0),t.scores_modal_open()}})},scores_modal_open:function(){t.$scores_modal.show()},scores_modal_get_table_data:function(e,a,s){var t,o=[],n=[];switch(e){case"singles":for(t=0;t<a.length;t++)o.push({label:a[t].name,player_id:a[t].id}),n.push({label:a[t].name,player_id:a[t].id});break;case"doubles":for(t=0;t<s.length;t++)o.push({label:s[t].name,team_id:s[t].id});break;case"team":o.push({label:"<strong>"+s[0].name+":</strong> "+s[0].players[0].name,team_id:s[0].id,player_id:s[0].players[0].id}),o.push({label:"<strong>"+s[1].name+":</strong> "+s[1].players[0].name,team_id:s[1].id,player_id:s[1].players[0].id}),o.push({label:"<strong>"+s[0].name+":</strong> "+s[0].players[1].name,team_id:s[0].id,player_id:s[0].players[1].id}),o.push({label:"<strong>"+s[1].name+":</strong> "+s[1].players[1].name,team_id:s[1].id,player_id:s[1].players[1].id}),o.push({label:"<strong>"+s[0].name+":</strong> "+s[0].players[0].name,team_id:s[0].id,player_id:s[0].players[0].id}),o.push({label:"<strong>"+s[1].name+":</strong> "+s[1].players[1].name,team_id:s[1].id,player_id:s[1].players[1].id}),o.push({label:"<strong>"+s[0].name+":</strong> "+s[0].players[1].name,team_id:s[0].id,player_id:s[0].players[1].id}),o.push({label:"<strong>"+s[1].name+":</strong> "+s[1].players[0].name,team_id:s[1].id,player_id:s[1].players[0].id}),n.push({label:s[0].name,team_id:s[0].id}),n.push({label:s[1].name,team_id:s[1].id}),n.push({label:s[0].players[0].name,player_id:s[0].players[0].id}),n.push({label:s[0].players[1].name,player_id:s[0].players[1].id}),n.push({label:s[1].players[0].name,player_id:s[1].players[0].id}),n.push({label:s[1].players[1].name,player_id:s[1].players[1].id})}return{rows:o,footer:n}},scores_modal_populate_table:function(o,n,r){var l,i,d,p,_,m,c,u=t.$scores_modal.find(".pingpong-scores-table"),y=u.find("tbody"),g=u.find("tfoot");for(u.find("thead").append("<tr />"),l=u.find("thead tr"),l.append("<th />"),m=0;m<o;m++)l.append(e("<th>"+s.game+" "+(m+1)+"</th>"));for(_=0;_<n.length;_++){for(d="undefined"!=typeof n[_].player_id?n[_].player_id:"",p="undefined"!=typeof n[_].team_id?n[_].team_id:"",i='<tr data-player-id="'+d+'" data-team-id="'+p+'"><td>'+n[_].label+"</td>",m=0;m<o;m++)i+='<td><input type="number" value="0" /></td>';i+="</tr>",y.append(e(i))}if(r)for(g.append(e('<tr class="pingpong-tfoot-title"><td colspan="'+(o+1)+'">'+s.totals+":</td></tr>")),c=0;c<r.length;c++)d="undefined"!=typeof r[c].player_id?r[c].player_id:"",p="undefined"!=typeof r[c].team_id?r[c].team_id:"",g.append(e("<tr><td>"+r[c].label+'</td><td data-player-id="'+d+'" data-team-id="'+p+'">0</td><td colspan="'+(o-1)+'"></td></tr>'));a.scores&&t.scores_modal_populate_scores(a.scores.matches)},scores_modal_populate_scores:function(a){return a.length!==t.$scores_modal.find("tbody tr").length/2?void t.scores_modal_error(s.cant_load_scores):(t.$scores_modal.find('tbody td:not(:first-of-type) input[type="number"]').each(function(){var s=e(this).closest("tr"),t=Math.floor(s.index()/2),o=e(this).closest("td").index()-1,n=s.index()%2===1?1:0;e(this).val(a[t][o][n])}),void t.scores_update())},scores_modal_error:function(e){t.$scores_modal.find(".pingpong-scores-error").slideDown().find("p").html(e)},scores_modal_close:function(){e("body").removeClass("pingpong-modal-open"),t.$scores_modal.find(".pingpong-scores-error").hide(),t.$scores_modal.find("thead, tbody, tfoot").html(""),t.$scores_modal.hide()},scores_update:function(){var a,s,o=t.$scores_modal.find("tbody tr").length/2,n=t.$scores_modal.find("thead th").length-1,r={},l={},i={win:null,scores:[],player_1:{id:0,team_id:0,games:0,$row:null},player_2:{id:0,team_id:0,games:0,$row:null}},d={player_1:{score:0,$input:null},player_2:{score:0,$input:null}},p=[];for(a=0;a<o;a++){for(i.player_1.$row=t.$scores_modal.find("tbody tr:eq("+2*a+")"),i.player_2.$row=t.$scores_modal.find("tbody tr:eq("+(2*a+1)+")"),i.player_1.id=i.player_1.$row.attr("data-player-id"),i.player_2.id=i.player_2.$row.attr("data-player-id"),i.player_1.team_id=i.player_1.$row.attr("data-team-id"),i.player_2.team_id=i.player_2.$row.attr("data-team-id"),"undefined"==typeof r[i.player_1.id]&&(r.length++,r[i.player_1.id]={games:0,points:0}),"undefined"==typeof r[i.player_2.id]&&(r.length++,r[i.player_2.id]={games:0,points:0}),"undefined"==typeof l[i.player_1.team_id]&&(l.length++,l[i.player_1.team_id]=0),"undefined"==typeof l[i.player_2.team_id]&&(l.length++,l[i.player_2.team_id]=0),i.player_1.games=0,i.player_2.games=0,i.win=null,i.scores=[],s=0;s<n;s++)d.player_1.$input=i.player_1.$row.find("td:eq("+(s+1)+') input[type="number"]'),d.player_2.$input=i.player_2.$row.find("td:eq("+(s+1)+') input[type="number"]'),i.player_1.games>=Math.floor(n/2)+1?(i.win=1,d.player_1.$input.prop("disabled",!0),d.player_2.$input.prop("disabled",!0)):i.player_2.games>=Math.floor(n/2)+1?(i.win=2,d.player_1.$input.prop("disabled",!0),d.player_2.$input.prop("disabled",!0)):(d.player_1.$input.prop("disabled",!1),d.player_2.$input.prop("disabled",!1)),d.player_1.score=parseInt(d.player_1.$input.val()),d.player_2.score=parseInt(d.player_2.$input.val()),d.player_1.score>=11&&d.player_1.score-d.player_2.score>=2?i.player_1.games++:d.player_2.score>=11&&d.player_2.score-d.player_1.score>=2&&i.player_2.games++,i.scores.push([{id:i.player_1.id,score:d.player_1.score},{id:i.player_2.id,score:d.player_2.score}]);r[i.player_1.id].games=r[i.player_1.id].games+i.player_1.games,r[i.player_2.id].games=r[i.player_2.id].games+i.player_2.games,i.win&&(l[i["player_"+i.win].team_id]=l[i["player_"+i.win].team_id]+1),p.push(i.scores)}t.scores.players=r,t.scores.teams=l,t.scores.matches=p,console.log(t.scores),e.each(r,function(e,a){return"length"==e||!e||void t.$scores_modal.find('tfoot [data-player-id="'+e+'"]').html(a.games)}),e.each(l,function(e,a){return"length"==e||!e||void t.$scores_modal.find('tfoot [data-team-id="'+e+'"]').html(a)})},scores_modal_submit:function(){confirm(s.confirm_submit_match)&&e.post(ajaxurl,{action:"pingpong_submit_scores",match_ID:a.match_ID,scores:t.scores},function(e){if("undefined"==typeof e.success||!e.success)return void alert(s.could_not_save_match)})}};e(t.init)}(jQuery);var PingPong_Admin_MatchCPTs;!function(e){"use strict";var a={},s={};"undefined"!=typeof PingPong_Admin&&(a=PingPong_Admin,s="undefined"!=typeof PingPong_Admin.l10n?PingPong_Admin.l10n:{});var t=PingPong_Admin_MatchCPTs={$games:null,init:function(){t.get_elements(),t.setup_handlers()},get_elements:function(){t.$games=e("#pingpong-won-games")},setup_handlers:function(){e(document).on("click","[data-expand-games]",t.toggle_games)},toggle_games:function(a){var o=t.$games.is(":visible");a.preventDefault(),o?(e(this).html(s.view_matches),t.hide_games()):(e(this).html(s.hide_matches),t.expand_games())},expand_games:function(e){t.$games.show()},hide_games:function(e){t.$games.hide()}};e(t.init)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
